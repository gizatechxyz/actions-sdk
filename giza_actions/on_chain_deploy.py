from giza_actions.model import GizaModel
from typing import Optional
import requests
from ape import Contract

class OCDeployer:
    """
    A blockchain deployer. `OC` stands for on-chain. Uses Ape framework and GizaModel to verify a model proof on-chain and execute an action from it.

    Attributes:
        model (GizaModel): The model that this deployer uploads proofs for. This model must have the following fields: model_path, id, version, orion_runner_service_url in order to work. This is because all on-chain models require a proof to be generated by Orion Runner.

    Methods:
        infer: Runs model inference and retrieves the model output
        get_model_data: retrieves the proof from GCP given the request_id, version_id, deployment_id, and internal model_id
        process_inference: overriden by user to specify calldata for a given smart contract function
        deploy: verifies the proof, then calls the smart contract with calldata from inference
    """
    
    def __init__(self, model: GizaModel):
        """Initialize deployer.
        
        Args:
            model (GizaModel): GizaModel instance
        """
        if (
            model.model_path is None
            or model.id is None
            or model.version is None
            or model.orion_runner_service_url is None
        ):
            raise ValueError(
                "GizaModel is missing required fields: "
                "model_path, id, version, orion_runner_service_url"
            )

        self.model = model

    def infer(self, input_file: Optional[str], input_feed: Optional[dict]):
        """Run model inference and store output."""
        # TODO: Extract the request id from this call as well so that we can obtain the proof
        self.inference = self.model.predict(input_file, input_feed, verifiable=True)
        print("Inference saved! âœ… Result: ", self.inference)
        
        
    # TODO: Make this function async using Asyncer
    def _get_model_data(self):
        """Get proof data from GCP."""
        proof_metadata_url = f"https://api-dev.gizatech.xyz/api/v1/models/{self.model.id}/versions/{self.model.version}/deployments/{self.model.orion_runner_service_url}/proofs/{self.request_id}"

        response = requests.get(proof_metadata_url)
        
        # TODO: Log this request and response

        if response.status_code == 200:
            proof_metadata = response.json()
            return proof_metadata
        else:
            raise Exception(f"Failed to get proof metadata: {response.text}")

    def process_inference(self):
        """
        Process inference data into contract calldata.
        
        Raises:
            Exception: If inference not run yet. 
        """
        if self.inference is None:
            raise Exception("Please run infer() before calling process_inference()")
            
        # Default just sends inference result to contract
        return self.inference

    def deploy(self, sc_address, calldata, proof):
        """
        Deploy model: Verify proof and execute contract function.
        
        Returns:
            Transaction hash
        """        
        contract = Contract(sc_address)
        # TODO: get model data
        # TODO: Validate proof locally and execute contract
        